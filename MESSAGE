To solve this challenge, you'll need to follow these steps:

Import necessary libraries and load the dataset.
Preprocess the dataset by converting text data to numerical vectors.
Create a machine learning model, such as a Naive Bayes classifier, to classify SMS messages as "ham" or "spam".
Train the model using the train dataset.
Create a function called predict_message that takes a message string as input, preprocesses it, predicts its class probability, and returns the likeliness of "ham" or "spam".
Test the function using the test dataset.


Here's the code to solve the challenge:
# Step 1: Import necessary libraries and load the dataset
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score

# Load the dataset
url_train = "https://raw.githubusercontent.com/dphi-official/Datasets/master/sms_spam_dataset/train_set_label.csv"
url_test = "https://raw.githubusercontent.com/dphi-official/Datasets/master/sms_spam_dataset/test_set_label.csv"
train_data = pd.read_csv(url_train)
test_data = pd.read_csv(url_test)

# Step 2: Preprocess the dataset
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(train_data['Message'])
y_train = train_data['Category']
X_test = vectorizer.transform(test_data['Message'])
y_test = test_data['Category']

# Step 3: Create a machine learning model
model = make_pipeline(CountVectorizer(), MultinomialNB())

# Step 4: Train the model
model.fit(X_train, y_train)

# Step 5: Create the predict_message function
def predict_message(message):
    prediction = model.predict_proba([message])[0]
    likeliness = prediction[1]  # Probability of being spam
    result = "spam" if prediction[1] > 0.5 else "ham"
    return [likeliness, result]

# Step 6: Test the function
predictions = []
for message in test_data['Message']:
    predictions.append(predict_message(message))

# Calculate accuracy
accuracy = accuracy_score(y_test, [pred[1] for pred in predictions])
print("Accuracy:", accuracy)
